[user]
	email = 
	name = 
[init]
	defaultBranch = main
[core]
	# Don't paginate output by default
	pager = cat
	# vim
	editor = vim
	# Don't consider trailing space change as a cause for merge conflicts
	whitespace = -trailing-space
[color]
	# Enable colors in color-supporting terminals
	ui = auto
[color "branch"]
	current = green bold
	local = red bold
	remote = cyan bold 
[fetch]
	# Auto-fetch submodule changes (sadly, won't auto-update)
	recurseSubmodules = on-demand
[pull]
	# This is GREAT… when you know what you're doing and are careful
	# not to pull --no-rebase over a local line containing a true merge.
	# rebase = true
	# This option, which does away with the one gotcha of
	# auto-rebasing on pulls, is only available from 1.8.5 onwards.
	# rebase = preserve
	# WARNING! This option, which is the latest variation, is only
	# available from 2.18 onwards.
	rebase = merges
[push]
	# Default push should only push the current branch to its push target, regardless of its remote name
	default = upstream
	# When pushing, also push tags whose commit-ishs are now reachable upstream
	followTags = true
	# No pain whilst pushing to remote for the first time
	autoSetupRemote = true
[merge]
	# Display common-ancestor blocks in conflict hunks
	# conflictStyle = diff3
	# Disable fast-forward merges as default merge strategy.
	# Force explicit call of `git merge --ff …`.
	ff = false
	# Custom/dedicated merge drive for npm lock files (`package-lock.json`).
	# Also works with Yarn.
	# Use Git attributes to set targeted files (located at `~/.config/git/attributes``
	# when installed with npm).
	# See https://www.npmjs.com/package/npm-merge-driver
	# [merge "npm-merge-driver"]
	# name = automatically merge npm lockfiles
	# driver = npx npm-merge-driver merge %A %O %B %P
[mergetool]
	# Clean up backup files created by merge tools on tool exit
	keepBackup = false
	# Clean up temp files created by merge tools on tool exiT
	keepTemporaries = false
	# Put the temp files in a dedicated dir anyway
	writeToTemp = true
	# Auto-accept file prompts when launching merge tools
	prompt = false
[status]
	# Display submodule rev change summaries in status
	submoduleSummary = true
	# Recursively traverse untracked directories to display all contents
	showUntrackedFiles = all
[log]
	# Use abbrev SHAs whenever possible/relevant instead of full 40 chars
	abbrevCommit = true
	# Automatically --follow when given a single path
	follow = true
	# Disable decorate for reflog
	# (because there is no dedicated `reflog` section available)
	decorate = false
[diff]
	# Use better, descriptive initials (c, i, w) instead of a/b.
	mnemonicPrefix = true
	# Show renames/moves as such
	renames = true
	# When using --word-diff, assume --word-diff-regex=.
	wordRegex = .
	# Display submodule-related information (commit listings)
	submodule = log
	# Use vim as default diff tool when running `git diff-tool`
	tool = vimdiff
[difftool]
	prompt = false
[grep]
	break = true
	heading = true
	lineNumber = true
	# Consider most regexes to be ERE
	extendedRegexp = true
[alias]
	# List available aliases
	aliases = !git config --get-regexp alias | sed -re 's/alias\\.(\\S*)\\s(.*)$/\\1 = \\2/g'
	# Command shortcuts
	a = add
	b = branch
	cl = clone
	cm = commit
	co = checkout
	cp = cherry-pick
	d = diff
	dt = difftool
	f = fetch
	i = init
	l = log --graph --date=relative --pretty=tformat:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%an %ad)%Creset'
	m = merge
	pl = pull
	ps = push
	r = revert
	rb = rebase
	re = reset
	rmt = remote
	s = status
	# Ensure that force-pushing won't lose someone else's work (only mine).
	push-with-lease = push --force-with-lease
	# List local commits that were not pushed to remote repository
	review-local = "!git lg @{push}.."
	# Edit last commit message
	reword = commit --amend
	# Update last commit without changing commit message
	oops = commit --amend --no-edit
	# Undo last commit but keep changed files in stage
	uncommit = reset --soft HEAD~1
	# Remove file(s) from Git but not from disk
	untrack = rm --cache --
[tag]
	# Sort tags as version numbers whenever applicable, so 1.10.2 is AFTER 1.2.0.
	sort = version:refname
[versionsort]
	prereleaseSuffix = -pre
	prereleaseSuffix = .pre
	prereleaseSuffix = -beta
	prereleaseSuffix = .beta
	prereleaseSuffix = -rc
	prereleaseSuffix = .rc
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
